version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cloudvps_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cloudvps}
      POSTGRES_USER: ${DB_USERNAME:-cloudvps}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-cloudvps}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cloudvps_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cloudvps_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - cloudvps_network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cloudvps_app
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cloudvps}
      DB_USERNAME: ${DB_USERNAME:-cloudvps}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      PROXMOX_HOST: ${PROXMOX_HOST}
      PROXMOX_USERNAME: ${PROXMOX_USERNAME}
      PROXMOX_PASSWORD: ${PROXMOX_PASSWORD}
      EMAIL_PROVIDER: ${EMAIL_PROVIDER:-smtp}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@yourdomain.com}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cloudvps_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cloudvps_nginx
    ports:
      - "82:82"
      - "444:444"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - cloudvps_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: cloudvps_backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - cloudvps_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  cloudvps_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
